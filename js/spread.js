/*
    在 JavaScript 中，很多内建函数都支持传入任意数量的参数。
    在 JavaScript 中，无论函数是如何定义的，你都可以在调用它时传入任意数量的参数。\
    我们可以在函数定义中声明一个数组来收集参数，语法 ...arr。
这将会声明一个数组，并指定其名称，其中存有剩余的参数。
    Rest 参数会收集剩余的所有参数， ...rest 必须写在参数列表最后。
    arguments 变量
有一个名为arguments的特殊类数组对象,可以在函数中被访问,该对象以参数在参数列表中的索引为键,存储所有参数.
尽管 arguments 是一个类数组，也是可迭代对象，但它终究不是数组。
    箭头函数没有 "arguments"
如果我们在箭头函数中访问 arguments，访问到的 arguments 并不属于箭头函数,
而是属于箭头函数外部的“普通”函数.
    spread语法
当在函数调用中使用 ...arr 时，它会把可迭代对象 arr “展开”到参数列表中。
们可以用 spread 语法这样操作任何可迭代对象。
使用 spread 语法也可以复制 array/object

*/

//Rest 参数会收集剩余的所有参数， ...rest 必须写在参数列表最后。
function sum_a(a,b,...c){
    return a+b;
}
let a_sum=[1,2,3];
sum_a(...a_sum);
let b_sum=[...a_sum];//复制数组与对象  浅拷贝